-----------------
疑問点
-----------------

sinatra/reloaderとは
通常は、アプリケーションを起動すると起動時にソースコードが読み込まれメモリに展開されて、ディスク上のコードを変更しても再度読み込むためにはsinatraを再起動する必要がある
sinatra-reloaderが入っているとディスク上のコードが変更された場合、再起動しなくても読み込んでくれる

requireとは何か
require（意味は要求する）で、rubyのコードの読み込みをしていする
progateのmenu.rbとfood.rbのところでも出てきたはず
gemの読み込みも同様にrequireで指定する

UI（ ユーザーインターフェース）とは？
UIは ユーザーインターフェイス（User Interface）の略
ホームページの場合、パソコンやスマートフォンに表示されるデザイン、 フォントなど、製品であれば製品そのものや外観など、
ユーザーの視覚に触れる全ての情報が「 UI」と呼ばれます。

UX（ ユーザーエクスペリエンス）とは？
UXは ユーザーエクスペリエンス（User Experience）の略
ユーザーがサービスを利用して獲得できる体験

スキーマとは
DBの構造
https://ja.wikipedia.org/wiki/%E3%82%B9%E3%82%AD%E3%83%BC%E3%83%9E_(%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9)
https://wa3.i-3-i.info/word13663.html

マイグレーションとは
SQLを書くことなくRubyでデータベース内に
テーブルを作成することができる機能
https://www.transnet.ne.jp/2015/12/29/rails%E5%88%9D%E5%BF%83%E8%80%85%E3%81%8C%E3%81%A4%E3%81%BE%E3%81%9A%E3%81%8D%E3%82%84%E3%81%99%E3%81%84%E3%80%8C%E3%83%9E%E3%82%A4%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%80%8Dcolnr/

-----------------
Git/GitHub
-----------------
Gitをインストールしたら真っ先にやっておくべき初期設定
https://qiita.com/wnoguchi/items/f7358a227dfe2640cce3

# nanoからvimに変更
git config --global core.editor 'vim -c "set fenc=utf-8"'

GitHubでユーザ名・パスワード省略
https://qiita.com/azusanakano/items/8dc1d7e384b00239d4d9#1-clone%E6%B8%88%E3%81%AE%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88


$ vim ~/.netrc
   
   machine github.com
   login username
   password xxxxxxx

$ vim .git/config

[remote "origin"]
  url = https://username:password@github.com/username/repository.git



# グローバル設定（デフォルトの設定）
git config --global user.name "user_name"
git config --global user.email "user_email"

# 設定の確認
git config --global -l

# 現在のワークツリーとインデックスの状況確認
git status

# バージョン管理の流れ
# 1,リポジトリの作成（初期化）
git init

# ファイルの変更
# 3,ファイルの変更箇所のステージ
git add ファイル名

# 4,コミット
git commit

# nanoを立ち上げないでコメント
git commit -m "コメント"

# コミット履歴の確認
git log

# 前回のコミットとの差分を確認
git diff



コマンドまとめ
-----------------------------------
git init	現在のフォルダ内にリポジトリを作成し、ワークツリーとインデックスを用意する。
git add ファイル名	新規追加や変更されたファイルを選択し、ステージさせる。
git commit	ステージされた変更をコミットする。git commit -m 'message'でも良い。
git status	ワークツリーとインデックスの状況をファイル単位で確認する。
git diff	ワークツリーとインデックスを比較して、その差分を表示する。
git log	過去のコミット履歴を確認する。
-----------------------------------


# GitHubへ反映
# GitHubへリポジトリを反映するための一連の流れ

# 1,GitHubにリモートリポジトリを作成する
「Repository name」に入力
# 2,ローカルリポジトリにリモートリポジトリを登録する
git remote add origin　URL

# リモートリポジトリの登録状況を確認
git remote -v

# 3,登録したリモートリポジトリへプッシュする
git push -u origin master

# 4,GitHubのリモートリポジトリにプッシュされたか確認する
ブラウザにてhttps://github.com/michikong0615/「Repository name」

まとめ
-----------------------------------
git remote add origin リモートリポジトリURL	ローカルリポジトリにリモートリポジトリを登録する
git remote -v	ローカルリポジトリに登録されたリモートリポジトリの一覧を表示する
git push origin master	登録したリモートリポジトリへプッシュする
-----------------------------------

GitHubにpushした後にコメントの変更

# コミット履歴
git log --oneline
   481575b (HEAD -> master, origin/master) GitHubに反映
   f04a9ca 復習←ここを変えたい
   2ef02db first commit

# コミットコメントを変更したいコミットの１つ直前のコミットを引数を指定
git rebase -i 2ef02db

nanoにてコメント変更するコミットに「edit」を指定する
control+Xの後にEnterで終了

# 指定したコミットのコミットコメントを修正
git commit --amend
一個前のコミットコメン���を修正
git commit --amend -m '新しいコメント'

# コミットコメントの修正
git rebase --continue

# コメントを修正した場合の強制
git push -f [repository] [branch]

https://qiita.com/ykawakami/items/71b462057a8d714d7382#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%83%BC%E3%81%AB%E5%86%8Dpush%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95


-----------------
section2
-----------------

# sinatraインストール
gem install -N sinatra
gem install -N sinatra-reloader

# 現在時刻の表示
Time.now

-----------------
section3:スタイルシート追加
-----------------

$ mkdir views
$ cd views/
$ touch index.erb
$ pwd
/home/ec2-user/environment/udemy_sinatra_2
$ mkdir public
$ touch public/style.css

Q,スタイルシートとは？

http://www.ink.or.jp/~bigblock/css/start.html


-----------------
section3:aboutページへのハイパーリンクを追加
-----------------
$ pwd
/home/ec2-user/environment/udemy_sinatra_2
$ touch public/about.html


ハイパーリンクの記述方法
<a href="kan.html">リンクの起点とするテキスト</a>

-----------------
section3:入力フォームを追加
-----------------

paramsというメソッドで
formからPOSTされた情報が取り出せます。



.gitignoreとは
Gitリポジトリにおいて、
意図的に追跡対象から外したい（無視したい）
ファイルを設定するためのファイルです。



-----------------
section4:BundlerでGem管理
-----------------

bundlerとは
作成されたGemfileをもとにgemをインストールするコマンドがbundle installです。
https://qiita.com/io_fleming/items/14626a9cff44bc87e7db


gemの扱いをbundler経由にする


# bundleのインストール
gem install bundler

# Gemfileの作成
bundle init

Gimfileとは
Railsアプリで利用するgemが記述されているファイルのことです。


# 取ってきたGimfileをひとまとまりにvendor/bundleに入れる
bundle install --path vendor/bundle

# サービスを起動
bundle exec ruby app.rb

-----------------
gemとは
-----------------

・誰かが作ってくれたソースコードのパッケージを
自分のプログラムにうまく取り込むための仕組み

・外部モジュール

・開発ではGemに頼ることはとても多い


-----------------
Bundlerとは
-----------------

・Gemを管理する仕組み

・たくさんのGemをワンアクションで
　インストールしてくれる。
　
　
　
-----------------
section4:ActiveRecord導入
-----------------

ActiveRecordとは

・RubyとSQLの翻訳機
・Datebaseの操作をRubyから簡単に行うための仕組み����
・SQLを裏でうまく作成してくれるので、
・SQLが苦手でもある程度扱える。
　
ActiveRecordとDBのCRUD

CRUD        メソッド       意味
SELECT      find, all      取得する
INSERT      create, save   作成する
UPDATE      update, save   更新する
DELETE      destory        削除する

Wikipedia参照
https://ja.wikipedia.org/wiki/Active_Record


bundle install

bundle exec rake -T

アプリにDBのテーブルを作る
bundle exec rake db:create_migration NAME=create_users

bundle exec rake db:migrate

-----------------
section4:DBにデータを保存する
-----------------

-----------------
section4:マイグレーションとは
-----------------
システム、または、データ資産の移行作業のことである。 
マイグレーションは、基幹システムを新しいプラットフォ
ームへ移行したり、OSやハードウェアなどの環境が異なる
システムへの移行を指す場合が多い。
https://wa3.i-3-i.info/word17035.html

-----------------
section4:バリデーション(validation)とは
-----------------
入力内容や記述内容が要件を満たしているか、
妥当性を確認すること
https://wa3.i-3-i.info/word11610.html

-----------------
section4:セクションを利用したメッセージ
-----------------

セクションとは
論理的な意味での開始から終了まで（を意図する単位）
https://wa3.i-3-i.info/word1791.html

-----------------
section5:irbでのActiveRecord操作メモを追加
-----------------

# ./app.rbの中身を読み込みながら起動
irb -r ./app.rb

Contactの一覧を確認
>　Contact.all

追加
>　Contact.create(name:"irb")

取得
>　c = Contact.find(12)

削除
>　c.destroy

一番最新の情報を取得
>　Contact.last

全て削除
>　Contact.destroy_all

-----------------
section6:emailカラムを追加
-----------------

# 新しいマイグレーションファイルを作成
bundle exec rake db:create_migration NAME=add_email_to_contacts

# 
bundle exec rake db:migrate

# 一個戻る
bundle exec rake db:rollback

-----------------
schema.rbとは
-----------------
https://qiita.com/k0kubun/items/491a9d9f2745335566e3

-----------------
section6:UIを調整
-----------------


# 失敗した場合の詳細を表示(!)
> Contact.create!







▼Udemyの14~26の疑問点を出す


14

Gemとは
bundlerとは

https://bundler.io/
Getting Started
始めるにはこうしたらいいよ

https://bundler.io/v2.0/guides/sinatra.html

bundlerの導入
gem install bundler

簡単なGemファイルを作成
bundle initとは

gem 'sinatra'
gem 'sinatra-reloader'とは


Gemfileから内容���読んでくるような準備部分をapp.rbの先頭に記載
Gemfileで導入したGemをこの記述で読み込める

require 'rubygems'
require 'bundler'

Bundler.require

# 取ってきたGimfileをひとまとまりにvendor/bundleに入れる
bundle install --path vendor/bundle

# Gemの扱いをbundler経由にしている
サービスを起動
bundle exec ruby app.rb



15

Gemとbundler
Rubyで用意されている
-----------------
gemとは
-----------------

・誰かが作ってくれたソースコードのパッケージを
自分のプログラムにうまく取り込むための仕組み

・外部モジュール

・開発ではGemに頼ることはとても多い


-----------------
Bundlerとは
-----------------

・Gemを管理する仕組み

・たくさんのGemをワンアクションで
　インストールしてくれる。
　
必要なGemをGemfileに記載して、
# bundle install
とするとインストールして組み込んでくれる便利な仕組み


16

▼Sinatra ActiveRecord Extension

https://github.com/janko/sinatra-activerecord
Gemfileにこの内容書いてねー

gem "sinatra-activerecord"
gem "sqlite3"
gem "rake"とは

app.rbに書いてねー

set :database, {adapter: "sqlite3", database: "contacts.sqlite3"}疑問

特殊な時に必要今回は関係ない。
class YourApplication < Sinatra::Base
  register Sinatra::ActiveRecordExtension
end


疑問# Rakefileを作成
require "sinatra/activerecord/rake"

namespace :db do
  task :load_config do
    require "./app"
  end
end


bundle exec rake -Tとは何をしてる？

マイグレーションファイルを作成(今回はcreate_contactsという名前で)
bundle exec rake db:create_migration NAME=create_contacts

マイグレーションとは
databaseの変更をする為の設定ファイル

疑問マイグレーションファイル
class CreateContacts < ActiveRecord::Migration 
  def change
    create_tableテーブル作成 :contacts名前 do |t|
      t.string文字列 :nameカラム
    end
  end
end

# databaseに反映される。
bundle exec rake db:migrateとは

疑問app.rb入れ物を作ってる？？？
class Contact < ActiveRecord::Base
  validates_presence_of :name名前は必ず入れなくてはいけないチェックとは？？？
end


疑問get '/users' do
  @users = User.all全件ユーザとれる
  erb :index
end

get '/users/:id' do
  @user = User.find(params[:id])そのIDを持っているユーザの情報が一件取れる
  erb :show
end

Gemを新しく追加するとbundle installを再度行わなくてはならない。

shema.rbとは
マイグレーション経由で作った内容が全件入っているとは

app.rb

name = params[:name]

contact = Contact.new({name: name)とは
contact.saveでcontacts.sqlite3にsaveされる？？？？





17
取ってきたデータをテーブルの形式で表示する

app.rb

@contacts = Contact.all
contactの内容が全件取れる

index.erb

<% @contacts.each do |contact| %>
   <tr>
      <td><%= contact.id %></td>
      <td><%= contact.name %></td>
   </tr>
<% end %>

18
databaseとは
mysqlの

テーブルとは
レコードとは
項目＝カラム
行＝レコード

レコードを取り出す
select 

新しい行を追加する
insert

更新する
update

削除する
delete



19
-----------------
ActiveRecordとは
-----------------
・RubyとSQLの翻訳機
・Datebaseの操作をRubyから簡単に行うための仕組み。
・SQLを裏でうまく作成してくれるので、
・SQLが苦手でもある程度扱える。
　
　

▼ActiveRecord
Contactモデルとは
Contactインスタンスとは

▼Datebase
contactsテーブル
contactsレコード
同じように扱える
Rubyの中でうまく置き換わっているので、操作できる。


ActiveRecordとDBのCRUD

CRUD        メソッド       意味
SELECT      find, all      取得する
INSERT      create, save   作成する
UPDATE      update, save   更新する
DELETE      destory        削除する


それぞれのメソッドを使うと対応しているSQLが発行される



20
マイグレーション

gitの説明
ソースコードの挿入ツール

マイグレーションファイルをgitで共有
databaseをマイグレートコマンドで反映することによって、
同じ環境にできる。

Q,Web上に共有Datebaseを作れば良いのでは

A,誰がテーブルを削除すると、今動いている他の他の人のソースで
エラーが起きてしまう

Q,DBの内容を全てエクスポートして送れば良いのでは？

A,同時に複数人がDBに変更を加える作業をしていた場合おかしくなる

A,公開サーバへの反映時にも現実的ではない

マイグレーションという形でDBの変更をテキストにして送るのが現実的
誰かと一緒に開発する場面ですごく便利。

